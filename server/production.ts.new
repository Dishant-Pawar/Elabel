import express from "express";
import { registerRoutes } from "./routes";
import bcrypt from 'bcrypt';
import db from './db';
import cors from 'cors';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const app = express();

// CORS middleware
app.use(cors({
  origin: true,
  credentials: true
}));

app.use(express.json());
app.use(express.urlencoded({ extended: false }));

// Request logging middleware
app.use((req: express.Request, res: express.Response, next: express.NextFunction) => {
  const start = Date.now();
  res.on('finish', () => {
    const duration = Date.now() - start;
    console.log(`${req.method} ${req.url} ${res.statusCode} ${duration}ms`);
  });
  next();
});

// Register API routes
registerRoutes(app);

// Serve static files in production
console.log('Starting server in production mode');

// Static file serving - point to the correct directory relative to the built server file
const publicDir = path.resolve(__dirname, '../public');
console.log('Serving static files from:', publicDir);

// Serve static files
app.use(express.static(publicDir));

// Handle client-side routing - Always send index.html for non-API routes
app.get('*', (req: express.Request, res: express.Response, next: express.NextFunction) => {
    if (!req.url.startsWith('/api')) {
        console.log('Serving index.html for:', req.url);
        res.sendFile(path.join(publicDir, 'index.html'));
    } else {
        next();
    }
});

const port = process.env.PORT ? parseInt(process.env.PORT) : 5000;
const host = process.env.HOST || 'localhost';

const server = app.listen(port, host, () => {
    console.log(`Server running at http://${host}:${port}`);
});

export default server;
